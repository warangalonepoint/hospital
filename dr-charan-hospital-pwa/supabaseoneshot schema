-- ROLES/USERS (simple pin-based for now; you can replace later with Auth)
create table if not exists profiles (
  id uuid primary key default gen_random_uuid(),
  full_name text,
  phone text,
  role text check (role in ('doctor','supervisor','patient','staff')),
  pin_hash text not null,            -- store a hash, not raw pin
  created_at timestamptz default now()
);

-- PATIENTS
create table if not exists patients (
  id uuid primary key default gen_random_uuid(),
  name text not null,
  phone text,
  dob date,
  notes text,               -- general file note
  created_at timestamptz default now()
);

-- BOOKINGS (created by supervisor; immutable by them after creation)
create table if not exists bookings (
  id uuid primary key default gen_random_uuid(),
  patient_id uuid references patients(id) on delete set null,
  booking_date date not null default current_date,
  slot_time time,
  token_no int generated always as identity,
  source text check (source in ('manual','whatsapp')) default 'manual',
  status text check (status in ('pending','checked_in','done','cancelled')) default 'pending',
  created_by uuid,          -- supervisor
  created_at timestamptz default now()
);

-- PATIENT VISIT NOTES (doctor only)
create table if not exists patient_notes (
  id uuid primary key default gen_random_uuid(),
  patient_id uuid references patients(id) on delete cascade,
  visit_date date default current_date,
  notes text,
  medication text,
  next_visit date,
  created_by uuid,
  created_at timestamptz default now()
);

-- STAFF & ATTENDANCE
create table if not exists staff (
  id uuid primary key default gen_random_uuid(),
  name text not null,
  role text default 'staff',
  phone text,
  active boolean default true,
  created_at timestamptz default now()
);
create table if not exists attendance (
  id uuid primary key default gen_random_uuid(),
  staff_id uuid references staff(id) on delete cascade,
  day date not null default current_date,
  status text check (status in ('present','absent','leave','onduty')) not null,
  ts timestamptz default now(),
  unique (staff_id, day)
);

-- PHARMACY â€” INVENTORY (optional), INVOICES & ITEMS
create table if not exists inventory (
  id uuid primary key default gen_random_uuid(),
  name text not null,
  batch text,
  mrp numeric(12,2),
  expiry date,
  created_at timestamptz default now()
);

create table if not exists invoices (
  id uuid primary key default gen_random_uuid(),
  invoice_no text not null,
  invoice_date date not null default current_date,
  patient_name text,
  patient_phone text,
  doctor_name text,
  discount_pct numeric(5,2) default 0,
  discount_rs numeric(12,2) default 0,
  total_rs numeric(12,2) not null default 0,
  paid_rs numeric(12,2) not null default 0,
  balance_rs numeric(12,2) not null default 0,
  created_by uuid,            -- supervisor
  created_at timestamptz default now(),
  unique(invoice_no)
);

create table if not exists invoice_items (
  id uuid primary key default gen_random_uuid(),
  invoice_id uuid references invoices(id) on delete cascade,
  item_name text not null,
  batch text,
  expiry date,
  qty int not null,
  price_rs numeric(12,2) not null,
  amount_rs numeric(12,2) not null
);

-- AGGREGATION VIEWS
create view if not exists v_sales_daily as
select invoice_date::date as day,
       sum(total_rs) total_rs,
       sum(paid_rs) paid_rs,
       sum(balance_rs) balance_rs,
       count(*) inv_count
from invoices
group by 1
order by 1 desc;

create view if not exists v_sales_monthly as
select date_trunc('month', invoice_date)::date as month,
       sum(total_rs) total_rs,
       sum(paid_rs) paid_rs,
       sum(balance_rs) balance_rs,
       count(*) inv_count
from invoices
group by 1
order by 1 desc;

-- RLS
alter table profiles enable row level security;
alter table patients enable row level security;
alter table bookings enable row level security;
alter table patient_notes enable row level security;
alter table staff enable row level security;
alter table attendance enable row level security;
alter table inventory enable row level security;
alter table invoices enable row level security;
alter table invoice_items enable row level security;

-- Open read for anon on non-sensitive tables (adjust later for real auth)
create policy "read_all" on patients for select using (true);
create policy "read_all_b" on bookings for select using (true);
create policy "read_all_s" on staff for select using (true);
create policy "read_all_inv" on invoices for select using (true);
create policy "read_all_invit" on invoice_items for select using (true);
create policy "read_views1" on inventory for select using (true);

-- Writes: anyone can insert via your PWA token (tighten later with Auth)
create policy "ins_pat" on patients for insert with check (true);
create policy "ins_book" on bookings for insert with check (true);
create policy "upd_book_noedit" on bookings for update using (false);  -- supervisors can't edit after creation
create policy "ins_note" on patient_notes for insert with check (true);
create policy "ins_staff" on staff for insert with check (true);
create policy "ins_att" on attendance for insert with check (true);
create policy "ins_inv" on invoices for insert with check (true);
create policy "ins_item" on invoice_items for insert with check (true);
